import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.util.Map;
import java.util.regex.Pattern;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Makli
 */
public final class World_Map_Panel extends JPanel implements ActionListener{
    // Class variables
    private String map_file_location;
    private String err_text;
    public boolean err_exists = false;
    
    /// Actor data
    public Color actor_color_houses[];
    public int actor_num_house = 0;
    
    private char [][] WMA;    /// World Map Array
    public Dimension WMPD = new Dimension(20, 20);
    public int x_offset = 50;
    public int y_offset = 50;
    
    public int position_margin = 5;
    public int size_margin = 9;
    
    Pattern wall_pattern;
    Pattern building_pattern;
    Pattern house_pattern;
    Pattern street_pattern;
    
    Timer World_Paint_Timer;
    Timer World_Timer;
    
    int secs_elapsed;
    
    static JMenuItem statisticsItem;
    
    /**
     * Creates new form World_Map_Panel
     * @param file_location
     * @param item
     * @throws java.io.IOException
     * @throws java.lang.InterruptedException
     */
    
    public World_Map_Panel(String file_location, JMenuItem item) throws IOException, InterruptedException {
        initComponents();
        map_file_location = file_location;
        statisticsItem = item;
        secs_elapsed = 0;
        
        World_Paint_Timer = new Timer(500, this);
        World_Paint_Timer.setRepeats(true);
        World_Paint_Timer.stop();
        
        int sec_timeout = 1000;
        
        World_Timer = new Timer(sec_timeout, (ActionEvent e) -> { 
            Map<Integer, World_Actor> current_actors_map = ((World_Map_Frame)this.getRootPane().getParent()).current_actor_map;
            if ( current_actors_map.size() > 0) {
                /// Move actors
                for (Integer num : current_actors_map.keySet()) {
                    current_actors_map.get(num).setNextPosition(WMA, current_actors_map);
                }
                
                /// Refresh data dialog
                ((World_Map_Frame)getRootPane().getParent()).data_DLG.Data_Clear_Table();
                ((World_Map_Frame)getRootPane().getParent()).data_DLG.Data_Populate_Table(current_actors_map);
                
                /// Increment time
                secs_elapsed += (sec_timeout/1000);
                
                /// Check if DONE is true
                boolean DONE = true;
                
                for (Integer num : current_actors_map.keySet()) {
                    if ( !((current_actors_map.get(num).done) && (current_actors_map.get(num).getLocation().x == current_actors_map.get(num).building_map.get(Integer.toString(num)).getCoordinates().x) && (current_actors_map.get(num).getLocation().y == current_actors_map.get(num).building_map.get(Integer.toString(num)).getCoordinates().y)) ) {
                        DONE = false;
                        break;
                    }
                }
                
                if ( DONE ) {
                    JOptionPane.showMessageDialog(null, "Όλοι οι πράκτορες εκτέλεσαν τα πλάνα τους.", "ΣΕΝΙΕ", JOptionPane.INFORMATION_MESSAGE);
                    statisticsItem.setEnabled(true);
                    World_Timer.stop();
                }
            } 
        });
        World_Timer.setRepeats(true);
        World_Timer.stop();
        
        World_Map_Array_Load();
        
        if ( err_exists ) {
            JOptionPane.showMessageDialog(null, "Προέκυψε σφάλμα κατά τη δημιουργία του χάρτη : " + err_text, "Σφάλμα", JOptionPane.ERROR_MESSAGE);
        }
        
        actor_color_houses = new Color[actor_num_house];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public boolean World_Map_Array_Load() throws IOException, ArrayIndexOutOfBoundsException {
        /// Initialize patterns
        if ( !World_Map_Array_Pattern() ) {
            return false;
        } else {
            /// Set file readers to get line number and populate the World_Map_Array
            try ( BufferedReader file_reader = new BufferedReader(new FileReader(map_file_location)); /// Get number of lines
                  LineNumberReader file_line_reader = new LineNumberReader(new FileReader(new File(map_file_location)))) {

                file_line_reader.skip(Long.MAX_VALUE);

                /// Helping variables' initialization
                String file_cur_line;
                int file_cur_line_index = -1;

                /// Get number of columns
                file_cur_line = file_reader.readLine();

                /// Array initialization
                WMA = new char[file_line_reader.getLineNumber() + 1][file_cur_line.length()];

                /// Array populization
                while ( file_cur_line != null ) {
                    file_cur_line_index++;
                    for ( int char_index = 0; char_index < file_cur_line.length(); char_index++ ) {
                        WMA[file_cur_line_index][char_index] = file_cur_line.charAt(char_index);
                    }
                    file_cur_line = file_reader.readLine();
                }

                /// Close readers to avoid memory leak
                file_reader.close();
            } catch (IOException | ArrayIndexOutOfBoundsException e) {
                err_text = e.getMessage();
                err_exists = true;
                return false;
            } finally {
                return true;
            }
        }
    }

    public boolean World_Map_Array_Pattern() {
        // Regular expressions
        String wall = "[*]";
        String building = "^(.*?[A-Z])";
        String house = "\\d";
        String street = "\\s";
        
        // Initialize Patterns
        wall_pattern = Pattern.compile(wall);
        building_pattern = Pattern.compile(building);
        house_pattern = Pattern.compile(house);
        street_pattern = Pattern.compile(street);
        
        return true;
    }
    
    public boolean World_Map_Array_Draw(Graphics2D g2) {
        actor_num_house = 0;
        setBackground(new Color(201, 211, 226));
        
        /// Make out differences between walls, buildings, houses and streets, then draw
        for ( int row_index = 0; row_index < WMA.length; row_index++ ) {
            for ( int column_index = 0; column_index < WMA[row_index].length; column_index++ ) {
                if ( wall_pattern.matcher(Character.toString(WMA[row_index][column_index])).find() ) {
                    g2.setColor(Color.BLACK);
                    g2.fillRect(x_offset + (column_index * WMPD.width), y_offset + (row_index * WMPD.height), WMPD.width, WMPD.height);
                } else if ( building_pattern.matcher(Character.toString(WMA[row_index][column_index])).find() ) {
                    g2.setColor(Color.BLACK);
                    g2.drawRect(x_offset + (column_index * WMPD.width), y_offset + (row_index * WMPD.height), WMPD.width, WMPD.height);
                    g2.drawString(Character.toString(WMA[row_index][column_index]), x_offset + (column_index * WMPD.width) + (WMPD.width / 2) - 4, y_offset + (row_index * WMPD.height) + (WMPD.height * 2 / 3) + 2);
                } else if ( street_pattern.matcher(Character.toString(WMA[row_index][column_index])).find() ) {
                    g2.setColor(Color.BLACK);
                    g2.drawRect(x_offset + (column_index * WMPD.width), y_offset + (row_index * WMPD.height), WMPD.width, WMPD.height);
                } else if ( house_pattern.matcher(Character.toString(WMA[row_index][column_index])).find() ) {
                    actor_num_house++;
                    g2.setColor(Color.BLACK);
                    g2.drawRect(x_offset + (column_index * WMPD.width), y_offset + (row_index * WMPD.height), WMPD.width, WMPD.height);
                    g2.drawString(Character.toString(WMA[row_index][column_index]), x_offset + (column_index * WMPD.width) + (WMPD.width / 2) - 4, y_offset + (row_index * WMPD.height) + (WMPD.height * 2 / 3) + 2);
                } else {
                    err_text = "Μη έγκυρο αρχείο χάρτη.";
                    err_exists = true;
                    return false;
                }
            }
        }
        
        return true;
    }
    
    public void World_Map_Actor_Draw(Graphics2D g2) {
        Map<Integer, World_Actor> current_actors_map = ((World_Map_Frame)this.getRootPane().getParent()).current_actor_map;
        if ( current_actors_map.size() > 0) {
            for (Integer num : current_actors_map.keySet()) {
                g2.setColor(current_actors_map.get(num).getColor());
                g2.fillRect((current_actors_map.get(num).x * WMPD.width + x_offset + position_margin), (current_actors_map.get(num).y * WMPD.height) + y_offset + position_margin, WMPD.width - size_margin, WMPD.height - size_margin);
            }
        }
        
        setVisible(true);
    }
    
    public Point World_Map_Get_Position(String key_building) {
        for ( int row_index = 0; row_index < WMA.length; row_index++ ) {
            for ( int column_index = 0; column_index < WMA[row_index].length; column_index++ ) {
                if ( Character.toString(WMA[row_index][column_index]).equals(key_building) ) {
                    return new Point(column_index, row_index);
                }
            }
        }
        
        return new Point(-1, -1);
    }
    
    public char[][] World_Map_Get_Array() {
        return WMA;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
        revalidate();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;

        RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        rh.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        g2.setRenderingHints(rh);

        /// Draw World Map
        if ( !World_Map_Array_Draw(g2) ) {
            err_exists = true;
        }
        
        /// Draw Actors
        World_Map_Actor_Draw(g2);
    }
    
    @Override
    public Dimension getPreferredSize() {
        return new Dimension( ((WMA[0].length * WMPD.width) + (2 * x_offset)), ((WMA.length * WMPD.height) + (3 * y_offset)) );
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
